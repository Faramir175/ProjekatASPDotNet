@model MojAtar.Core.DTO.RadnjaDTO
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Dodaj / Izmeni Radnju";
}

@if (!ViewData.ModelState.IsValid)
{
    foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
    {
        <div class="alert alert-danger">@modelError.ErrorMessage</div>
    }
}

<div class="container py-5">
    <div class="container-glass" style="max-width: 600px; margin: auto;">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>@(Model.Id == null ? "Dodaj Radnju" : "Izmeni Radnju")</h2>

            @if (Model.IdParcela != null)
            {
                <a asp-action="RadnjePoParceli" asp-route-idParcela="@Model.IdParcela" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Nazad
                </a>
            }
            else
            {
                <a asp-action="Radnje" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Nazad
                </a>
            }
        </div>


            <form method="post" asp-action="@(Model.Id == null ? "Dodaj" : "Izmeni")" asp-controller="Radnja">
                @if (Model.Id != null)
                {
                    <input type="hidden" asp-for="Id" />
                }
                <div id="obrisaneMasineContainer"></div>
                <div id="obrisanePrikljucneContainer"></div>
                <div id="obrisaniResursiContainer"></div>

                <div class="mb-3">
                    <label class="form-label" for="IdParcela">Parcela</label>
                    <select asp-for="IdParcela" class="form-control" asp-items="ViewBag.ParceleSelectList">
                        <option value="">-- Izaberite parcelu --</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label asp-for="DatumIzvrsenja" class="form-label">Datum izvršenja</label>
                    <input asp-for="DatumIzvrsenja" class="form-control" type="date" />
                </div>

                @if (Model.Id == null)
                {
                    <div class="mb-3">
                        <label asp-for="TipRadnje" class="form-label">Tip radnje</label>
                    <select asp-for="TipRadnje" class="form-control" asp-items="Html.GetEnumSelectList<MojAtar.Core.Domain.Enums.RadnjaTip>()"></select>
                    </div>
                }
                else
                {
                <div class="mb-3">
                    <label>Tip radnje</label>
                    <select asp-for="TipRadnje" class="form-control" disabled id="TipRadnje">
                        <option value="@Model.TipRadnje" selected>@Model.TipRadnje</option>
                    </select>
                    <input type="hidden" asp-for="TipRadnje" />
                </div>
                }

                <div class="mb-3">
                    <label asp-for="VremenskiUslovi" class="form-label">Vremenski uslovi</label>
                    <input asp-for="VremenskiUslovi" class="form-control" />
                </div>

                <div class="mb-3">
                    <label asp-for="Napomena" class="form-label">Napomena</label>
                    <textarea asp-for="Napomena" class="form-control"></textarea>
                </div>

                <div class="mb-3">
                    <label for="IdKultura">Kultura</label>
                    <select asp-for="IdKultura" class="form-control" asp-items="ViewBag.KultureSelectList">
                        <option value="">-- Izaberite kulturu --</option>
                    </select>
                </div>

                <div class="mb-3" id="povrsinaDiv" style="display:@(Model.TipRadnje == MojAtar.Core.Domain.Enums.RadnjaTip.Setva ? "block" : "none")">
                    <label asp-for="Povrsina" class="form-label">Površina za setvu (ha)</label>
                    <input asp-for="Povrsina" class="form-control" type="number" step="0.01" min="0.01" />
                </div>


                <div class="mb-3" id="prinosDiv" style="display:@(Model.TipRadnje == MojAtar.Core.Domain.Enums.RadnjaTip.Zetva ? "block" : "none")">
                    <label asp-for="Prinos" class="form-label">Prinos (t)</label>
                    <input asp-for="Prinos" class="form-control" type="number" step="0.01" />
                </div>

                <div id="listaMasina">
                    <label class="form-label">Izaberi radne masine koje koristis na ovoj radnji</label>

                    @{
                        var povezaneMasine = Model.RadneMasine?.ToDictionary(rm => rm.IdRadnaMasina, rm => (double)rm.BrojRadnihSati)
                        ?? new Dictionary<Guid, double>();

                        int index = 0;
                    }

                    @foreach (var masina in (IEnumerable<SelectListItem>)ViewBag.RadneMasineSelectList)
                    {
                        var isChecked = povezaneMasine.ContainsKey(Guid.Parse(masina.Value));
                        <div class="form-check">
                            <input class="form-check-input masina-checkbox" type="checkbox"
                                   id="masinaCheckbox_@masina.Value" value="@masina.Value" data-naziv="@masina.Text"
                            @(isChecked ? "checked" : "") />
                            <label class="form-label" for="masinaCheckbox_@masina.Value">
                                @masina.Text
                            </label>
                        </div>
                        if (isChecked)
                        {
                            <div class="mb-3" id="unos-masina-@masina.Value">
                                <label class="form-label">Radna mašina: @masina.Text – broj sati</label>
                                <input type="hidden" name="RadneMasine[@index].IdRadnaMasina" value="@masina.Value" />
                                <input type="number" name="RadneMasine[@index].BrojRadnihSati" class="form-control" step="1" min="1" value="@povezaneMasine[Guid.Parse(masina.Value)]" required />
                            </div>
                            index++;
                        }
                    }
                </div>

                <div id="masineDetaljiContainer"></div>

                <div id="listaPrikljucnihMasina">
                    <label class="form-label">Izaberi priključne mašine koje koristis na ovoj radnji</label>

                    @{
                        var povezanePrikljucne = Model.PrikljucneMasine?
                        .Select(pm => pm.IdPrikljucnaMasina)
                        .ToHashSet()
                        ?? new HashSet<Guid>();

                        int indexPrik = 0;
                    }

                    @foreach (var masina in (IEnumerable<SelectListItem>)ViewBag.PrikljucneMasineSelectList)
                    {
                        var isChecked = povezanePrikljucne.Contains(Guid.Parse(masina.Value));
                        <div class="form-check">
                            <input class="form-check-input prikljucna-checkbox" type="checkbox"
                                   id="prikljucnaCheckbox_@masina.Value" value="@masina.Value" data-naziv="@masina.Text"
                            @(isChecked ? "checked" : "") />
                            <label class="form-label" for="prikljucnaCheckbox_@masina.Value">
                                @masina.Text
                            </label>
                        </div>
                        if (isChecked)
                        {
                            <input type="hidden" name="PrikljucneMasine[@indexPrik].IdPrikljucnaMasina" value="@masina.Value" />
                            indexPrik++;
                        }
                    }

                </div>

                <div id="prikljucneDetaljiContainer"></div>

                <div id="listaResursa">
                    <label class="form-label">Izaberi resurse koje koristiš u ovoj radnji</label>

                    @{
                        var povezaniResursi = Model.Resursi?.ToDictionary(r => r.IdResurs, r => (r.Kolicina, r.DatumKoriscenja))
                        ?? new Dictionary<Guid, (double, DateTime)>();
                    }

                    @foreach (var resurs in (IEnumerable<SelectListItem>)ViewBag.ResursiSelectList)
                    {
                        var isChecked = povezaniResursi.ContainsKey(Guid.Parse(resurs.Value));
                        <div class="form-check">
                            <input class="form-check-input resurs-checkbox" type="checkbox"
                                   id="resursCheckbox_@resurs.Value" value="@resurs.Value" data-naziv="@resurs.Text"
                            @(isChecked ? "checked" : "") />
                            <label class="form-label" for="resursCheckbox_@resurs.Value">
                                @resurs.Text
                            </label>
                        </div>
                    }
                </div>

                <div id="resursDetaljiContainer">
                    @{
                        int indexResurs = 0; 
                    }
                    @foreach (var resurs in (IEnumerable<SelectListItem>)ViewBag.ResursiSelectList)
                    {
                        var isChecked = povezaniResursi.ContainsKey(Guid.Parse(resurs.Value));
                        if (isChecked)
                        {
                            var resData = povezaniResursi[Guid.Parse(resurs.Value)];

                            <div class="mb-3" id="unos-resurs-@resurs.Value" style="display: block;">
                                <label class="form-label">Resurs: @resurs.Text – količina i datum</label>
                                <input type="hidden" name="Resursi[@indexResurs].IdResurs" value="@resurs.Value" />
                                <input type="number" name="Resursi[@indexResurs].Kolicina" class="form-control mb-2 resurs-kolicina-input" step="0.1" min="0" value="@resData.Item1" required />
                                <input type="date" name="Resursi[@indexResurs].DatumKoriscenja" class="form-control" value="@resData.Item2.ToString("yyyy-MM-dd")" required />
                            </div>
                            indexResurs++;
                        }
                    }
                </div>

                <div id="ukupanTrosakPrikaz" class="mt-3">
                    <strong>
                        Ukupan trošak:
                        <span id="ukupanTrosak">
                            @(Model.Id != null ? Model.UkupanTrosak.ToString("0.00") : "0.00")
                        </span> RSD
                    </strong>
                </div>

                <input type="hidden" name="UkupanTrosak" value="@(Model.Id != null ? Model.UkupanTrosak.ToString("0.00") : "0.00")" />

                <button type="submit" class="btn btn-success mt-3">Sačuvaj</button>
            </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
                const tipRadnjeSelect = document.getElementById("TipRadnje");
                const prinosDiv = document.getElementById("prinosDiv");
                const povrsinaDiv = document.getElementById("povrsinaDiv");

                const SETVA_VALUE = "@((int)MojAtar.Core.Domain.Enums.RadnjaTip.Setva)";
                const ZETVA_VALUE = "@((int)MojAtar.Core.Domain.Enums.RadnjaTip.Zetva)";

                // Funkcija za Dodaj stranicu
                function toggleZetvaSetvaDodaj() {
                    if (tipRadnjeSelect) {
                        if (tipRadnjeSelect.value === SETVA_VALUE) {
                            povrsinaDiv.style.display = "block";
                            prinosDiv.style.display = "none";
                        } else if (tipRadnjeSelect.value === ZETVA_VALUE) {
                            povrsinaDiv.style.display = "none";
                            prinosDiv.style.display = "block";
                        } else {
                            povrsinaDiv.style.display = "none";
                            prinosDiv.style.display = "none";
                        }
                    }
                }

                // Funkcija za Izmeni stranicu
                function toggleZetvaSetvaIzmeni() {
                    if (tipRadnjeSelect) {
                        // Kod izmeni select je disabled, vrednost dolazi iz modela
                        const tipRadnje = "@((int)Model.TipRadnje)";
                        if (tipRadnje === SETVA_VALUE) {
                            povrsinaDiv.style.display = "block";
                            prinosDiv.style.display = "none";
                        } else if (tipRadnje === ZETVA_VALUE) {
                            povrsinaDiv.style.display = "none";
                            prinosDiv.style.display = "block";
                        } else {
                            povrsinaDiv.style.display = "none";
                            prinosDiv.style.display = "none";
                        }
                    }
                }

                // Pozivanje prema tipu stranice
                @if (Model.Id == null)
                {
                        <text>
                            tipRadnjeSelect?.addEventListener("change", toggleZetvaSetvaDodaj);
                            toggleZetvaSetvaDodaj();
                        </text>
                }
                else
                {
                        <text>
                            toggleZetvaSetvaIzmeni();
                        </text>
                }

            // RADNE MAŠINE (Your existing logic for machines is fine for showing/hiding)
            let masineBrojac = document.querySelectorAll('#masineDetaljiContainer input[name^="RadneMasine["]').length;
            const masineMap = new Map();

            document.querySelectorAll('.masina-checkbox:checked').forEach(checkbox => {
                const id = checkbox.value;
                const existingDiv = document.getElementById(`unos-masina-${id}`);
                if (existingDiv && !masineMap.has(id)) {
                    masineMap.set(id, masineBrojac++);
                }
            });

            document.querySelectorAll('.masina-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const id = this.value;
                    const naziv = this.getAttribute('data-naziv');
                    const container = document.getElementById("masineDetaljiContainer");
                    const existing = document.getElementById(`unos-masina-${id}`);

                    if (this.checked) {
                        if (existing) {
                            existing.style.display = "block";
                            existing.querySelectorAll("input").forEach(i => i.disabled = false);
                        } else {
                            const index = masineBrojac++;
                            masineMap.set(id, index);

                            const div = document.createElement("div");
                            div.classList.add("mb-3");
                            div.id = `unos-masina-${id}`;
                            div.innerHTML = `
                                        <label class="form-label">Radna mašina: ${naziv} – broj sati</label>
                                <input type="hidden" name="RadneMasine[${index}].IdRadnaMasina" value="${id}" />
                                <input type="number" name="RadneMasine[${index}].BrojRadnihSati" class="form-control" step="1" min="1" required />
                            `;
                            container.appendChild(div);
                        }
                        const removed = document.getElementById(`obrisana-masina-${id}`);
                        if (removed) removed.remove();
                    } else {
                        if (existing) {
                            existing.style.display = "none";
                            existing.querySelectorAll("input").forEach(i => i.disabled = true);

                            const deletedContainer = document.getElementById("obrisaneMasineContainer");
                            if (deletedContainer && !document.getElementById(`obrisana-masina-${id}`)) {
                                const hiddenInput = document.createElement("input");
                                hiddenInput.type = "hidden";
                                hiddenInput.name = "ObrisaneRadneMasineId[]";
                                hiddenInput.value = id;
                                hiddenInput.id = `obrisana-masina-${id}`;
                                deletedContainer.appendChild(hiddenInput);
                            }
                        }
                    }
                });
            });

            // PRIKLJUČNE MAŠINE (Your existing logic for machines is fine for showing/hiding)
            let prikljucneBrojac = document.querySelectorAll('#prikljucneDetaljiContainer input[name^="PrikljucneMasine["]').length;
            const prikljucneMap = new Map();

            document.querySelectorAll('.prikljucna-checkbox').forEach(checkbox => {
                const id = checkbox.value;
                const existing = document.getElementById(`unos-prikljucna-${id}`);
                if (existing && !prikljucneMap.has(id)) {
                    prikljucneMap.set(id, prikljucneBrojac++);
                }
            });

            document.querySelectorAll('.prikljucna-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const id = this.value;
                    const container = document.getElementById("prikljucneDetaljiContainer");
                    const existing = document.getElementById(`unos-prikljucna-${id}`);

                    if (this.checked) {
                        if (!document.getElementById(`unos-prikljucna-${id}`)) {
                            const input = document.createElement("input");
                            input.type = "hidden";
                            input.name = `PrikljucneMasine[${prikljucneBrojac}].IdPrikljucnaMasina`;
                            input.id = `unos-prikljucna-${id}`;
                            input.value = id; // Ensure value is set for the hidden input
                            container.appendChild(input);
                            prikljucneBrojac++; // Increment for new additions
                        }
                        const removed = document.getElementById(`obrisana-prikljucna-${id}`);
                        if (removed) removed.remove();
                    } else {
                        if (existing) {
                            existing.remove();
                            const deletedContainer = document.getElementById("obrisanePrikljucneContainer");
                            if (deletedContainer && !document.getElementById(`obrisana-prikljucna-${id}`)) {
                                const hiddenInput = document.createElement("input");
                                hiddenInput.type = "hidden";
                                hiddenInput.name = "ObrisanePrikljucneMasineId[]";
                                hiddenInput.value = id;
                                hiddenInput.id = `obrisana-prikljucna-${id}`;
                                deletedContainer.appendChild(hiddenInput);
                            }
                        }
                    }
                });
            });


            // ==================================================================
            // ISPRAVLJENA LOGIKA ZA RESURSE I IZRAČUNAVANJE TROŠKA
            // ==================================================================
            const ceneResursa = @Html.Raw(Json.Serialize(ViewBag.CeneResursa));
            const resursDetaljiContainer = document.getElementById("resursDetaljiContainer");

            // Brojač za indekse novih resursa, počinje od broja već postojećih
            let resursBrojac = @(Model.Resursi?.Count ?? 0);

            function izracunajUkupanTrosak() {
                let ukupno = 0;
                // Selektuj SVE inpute za količinu unutar kontejnera
                const sviKolicinaInputi = resursDetaljiContainer.querySelectorAll('.resurs-kolicina-input');

                sviKolicinaInputi.forEach(kolicinaInput => {
                    // Jednostavna i pouzdana provera: ako input NIJE onemogućen, dodaj u trošak
                    if (!kolicinaInput.disabled) {
                        const kolicina = parseFloat(kolicinaInput.value) || 0;
                        const parentDiv = kolicinaInput.closest('div[id^="unos-resurs-"]');
                        if (parentDiv) {
                            const resursId = parentDiv.id.replace('unos-resurs-', '');
                            const cena = parseFloat(ceneResursa[resursId]) || 0;
                            ukupno += kolicina * cena;
                        }
                    }
                });

                document.getElementById("ukupanTrosak").innerText = ukupno.toFixed(2);
                const hiddenUkupanTrosakInput = document.querySelector('input[name="UkupanTrosak"]');
                if (hiddenUkupanTrosakInput) {
                    hiddenUkupanTrosakInput.value = ukupno.toFixed(2);
                }
            }

            // Koristimo "event delegation" - jedan listener na kontejneru umesto mnogo njih na inputima
            resursDetaljiContainer.addEventListener('input', function (e) {
                // Ako je događaj potekao od inputa za količinu, preračunaj trošak
                if (e.target && e.target.classList.contains('resurs-kolicina-input')) {
                    izracunajUkupanTrosak();
                }
            });

            document.querySelectorAll('.resurs-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const id = this.value;
                    const naziv = this.getAttribute('data-naziv');
                    let existingDiv = document.getElementById(`unos-resurs-${id}`);
                    const obrisaniResursiContainer = document.getElementById("obrisaniResursiContainer");

                    if (this.checked) {
                        // Ako polja već postoje (jer su bila deselektovana), samo ih prikaži i omogući
                        if (existingDiv) {
                            existingDiv.style.display = 'block';
                            existingDiv.querySelectorAll("input").forEach(i => i.disabled = false);
                        } else {
                            // Ako ne postoje, kreiraj ih
                            existingDiv = document.createElement("div");
                            existingDiv.classList.add("mb-3");
                            existingDiv.id = `unos-resurs-${id}`;
                            const index = resursBrojac++; // Koristi i inkrementiraj brojač
                            existingDiv.innerHTML = `
                                                <label class="form-label">Resurs: ${naziv} – količina i datum</label>
                                        <input type="hidden" name="Resursi[${index}].IdResurs" value="${id}" />
                                        <input type="number" name="Resursi[${index}].Kolicina" class="form-control mb-2 resurs-kolicina-input" step="0.1" min="0" required />
                                        <input type="date" name="Resursi[${index}].DatumKoriscenja" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />`;
                            resursDetaljiContainer.appendChild(existingDiv);
                        }
                        // Ukloni iz liste za brisanje ako je bio dodat
                        const hiddenInputZaBrisanje = document.getElementById(`obrisan-resurs-${id}`);
                        if (hiddenInputZaBrisanje) {
                            hiddenInputZaBrisanje.remove();
                        }
                    } else { // Ako je checkbox deselektovan
                        if (existingDiv) {
                            // Sakrij i OBAVEZNO onemogući polja. Onemogućena polja se ne šalju sa formom.
                            existingDiv.style.display = 'none';
                            existingDiv.querySelectorAll("input").forEach(i => i.disabled = true);
                        }
                        // Dodaj u listu za brisanje na serveru (samo ako već nije tamo)
                        if (!document.getElementById(`obrisan-resurs-${id}`)) {
                            const hiddenInput = document.createElement("input");
                            hiddenInput.type = "hidden";
                            hiddenInput.name = "ObrisaniResursiId[]";
                            hiddenInput.value = id;
                            hiddenInput.id = `obrisan-resurs-${id}`;
                            obrisaniResursiContainer.appendChild(hiddenInput);
                        }
                    }
                    // Nakon SVAKE promene, ponovo izračunaj ukupan trošak
                    izracunajUkupanTrosak();
                });
            });

            // Inicijalno izračunavanje troška prilikom učitavanja stranice
            izracunajUkupanTrosak();
        });
    </script>
}
